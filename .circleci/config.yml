version: 2
jobs:
  build:
    docker:
      - image: node:8.1.2
    working_directory: ~/circleci-working
    environment:
      TAG: $CIRCLE_SHA1

    steps:
      # checkout sourcecode on to working_directory
      - checkout

      # Before setup_remote_docker, all commands are executed in the primary container.
      # - run: mkdir -p <dir>

      # Once setup_remote_docker is called, a new remote environment is created,
      # and your primary container is configured to use it. This is a way to solve 
      # Docker-in-Docker problem described below:
      # https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/
      - setup_remote_docker

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

      # All docker-related commands are also executed in your primary container, 
      # but building/pushing images and running containers happens in the remote Docker Engine
      - run:
          name: Build Docker image
          command: |
            #TAG=$CIRCLE_SHA1
            docker build -t yoichikawasaki/angular4-app:$TAG angular4-app

      - run:
          name: Start container and check if it's running
          command: |
            # make sure you're not using `--rm` option otherwise container will be killed after finish
            #TAG=$CIRCLE_SHA1
            docker run -d --name angular4-app yoichikawasaki/angular4-app:$TAG 
            docker exec angular4-app curl --retry 10 --retry-delay 3  http://localhost:4200
      
      - run:
          name: Push Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              #TAG="${CIRCLE_SHA1}"
              docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
              docker push yoichikawasaki/angular4-app:$TAG
            fi
